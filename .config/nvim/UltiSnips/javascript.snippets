priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet fun "function (named)" b
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet lf "function (assigned to let)"
${1:let }${2:function_name} = function $2($3) {
	${VISUAL}$0
};
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51

snippet fun "function (anonymous)" w
function($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function($1) {
	${VISUAL}$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${VISUAL}$0
} else {
	${2}
}
endsnippet

snippet switch
switch (${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${VISUAL}${1:case}':
	${VISUAL}$0
	break;
endsnippet

snippet do "do { ... } while (condition)"
do {
	${VISUAL}$0
} while (${1:/* condition */});
endsnippet

snippet imp "import"
import ${2} from ${1}
endsnippet

# Debugging
snippet cl "console.log" A
console.log(${0});
endsnippet

snippet cd "console.debug"
console.debug(${0});
endsnippet

snippet ce "console.error"
console.error(${0});
endsnippet

snippet cw "console.warn"
console.warn(${0});
endsnippet

snippet ci "console.info"
console.info(${0});
endsnippet

snippet ct "console.trace"
console.trace(${0:label});
endsnippet

snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}");
${0:${VISUAL}}
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}");
endsnippet

snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj});
endsnippet

snippet cclear "console.clear"
console.clear();
endsnippet

snippet cdir "console.dir"
console.dir(${0:obj});
endsnippet

snippet cdirx "console.dirxml"
console.dirxml(${1:object});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cprof "console.profile"
console.profile("${1:label}");
${0:${VISUAL}}
console.profileEnd();
endsnippet

snippet ctable "console.table"
console.table(${1:"${2:value}"});
endsnippet

snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2));
endsnippet

# vim:ft=snippets:
